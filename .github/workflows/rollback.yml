name: Rollback Infra (Terraform)

# on:
#   push:
#     branches: ["main"]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

        with:
          terraform_version: 1.1.7

      - name: Initialize Terraform
        run: terraform init
        working-directory: ci

      - name: Initialize Terraform
        run: terraform init
        working-directory: ci

      - name: Terraform Destroy
        run: terraform destroy
        working-directory: ci

      - name: Save Terraform State
        if: always()
        uses: actions/upload-artifact@v4
        working-directory: ci
        with:
          name: terraform-state
          path: ./terraform.tfstate

    # - name: Plan Terraform
    #   env:
    #     TF_VAR_public_key: ${{ env.PUBLIC_KEY }}
    #   run: terraform plan

    # - name: Apply Terraform
    #   env:
    #     TF_VAR_public_key: ${{ env.PUBLIC_KEY }}
    #   run: terraform apply -auto-approve

    # - name: Save Terraform State
    #   if: always()
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: terraform-state
    #     path: ./terraform.tfstate

  # Deploy Node Application.
  # deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "20"

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Build project
  #       run: npm run build # Change this if you have a different build step

  #     - name: Upload SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         name: id_rsa
  #         known_hosts: ${{ secrets.EC2_HOST }}

  #     - name: Deploy to EC2
  #       env:
  #         EC2_USER: ${{ secrets.EC2_USER }}
  #         EC2_HOST: ${{ secrets.EC2_HOST }}
  #         EC2_PATH: ${{ secrets.EC2_PATH }}
  #       run: |
  #         ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "mkdir -p $EC2_PATH"
  #         rsync -avz --exclude 'node_modules' ./ $EC2_USER@$EC2_HOST:$EC2_PATH/
  #         ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
  #           cd $EC2_PATH &&
  #           npm install &&
  #           pm2 restart all || pm2 start app.js --name my-app
  #         "
